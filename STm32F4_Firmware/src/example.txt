///////////////////// Timer CC INTERRUPT //////////////////
	

	// Clock enable (GPIO)
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	// Config als Digital-Eingang
	GPIO_InitTypeDef  GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource0, GPIO_AF_TIM5) ;


	/* Enable the TIM5 global Interrupt */
	NVIC_InitTypeDef   NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);

	/* TIM5 ch1 configuration: Input Capture mode ---------------------
	     The external signal is connected to TIM5 CH1 pin (PA0)
	     The Rising edge is used as active edge,
	     The TIM5 CCR? is used to compute the frequency value
	  ------------------------------------------------------------ */
	/* TIM3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
	TIM_ICInitTypeDef  TIM_ICInitStructure;
	TIM_ICInitStructure.TIM_Channel = TIM_Channel_1;
	TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;
	TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
	TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
	TIM_ICInitStructure.TIM_ICFilter = 0x0;

	TIM_ICInit(TIM5, &TIM_ICInitStructure);

	/* TIM enable counter */
	TIM_Cmd(TIM5, ENABLE);

	/* Enable the CompareChannel1 Interrupt Request */
	TIM_ITConfig(TIM5, TIM_IT_CC1, ENABLE);
	
	
-----------------------------------------------------------------------------------------------------------------------------------
	
	
		///////////////////// INPUT INTERRUPT //////////////////
		EXTI_InitTypeDef   EXTI_InitStructure;
		NVIC_InitTypeDef   NVIC_InitStructure;
	
		// Clock enable (GPIO)
		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	
		// Config als Digital-Eingang
		GPIO_InitTypeDef  GPIO_InitStructure;
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
		GPIO_Init(GPIOA, &GPIO_InitStructure);
	
		// Clock enable (SYSCONFIG)
		RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
	
		// EXT_INT0 mit Pin verbinden
		SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource0);
	
		// EXT_INT0 config
		EXTI_InitStructure.EXTI_Line = EXTI_Line0;
		EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
		EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
		EXTI_InitStructure.EXTI_LineCmd = ENABLE;
		EXTI_Init(&EXTI_InitStructure);
	
		// NVIC config
		NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x01;
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
		NVIC_Init(&NVIC_InitStructure);
	
	
	extern "C" void EXTI0_IRQHandler(void){
	if(EXTI_GetITStatus(EXTI_Line0) != RESET){
		// wenn Interrupt aufgetreten
		EXTI_ClearITPendingBit(EXTI_Line0);
		uint16_t timerValue=TIM_GetCounter(TIM3);
		if(GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0)!=Bit_RESET && timerValue>10000) {
			GPIO_ToggleBits(GPIOD, GPIO_Pin_14);

			TIM_Cmd(TIM3, DISABLE);
			TIM_SetCounter(TIM3,0);
			TIM_Cmd(TIM3, ENABLE);

			// timer runs with 2 MHz
			// if the engine runs with 3.000 rpm we should have 3000/60*2(double ignition)=100 pulses per second
			// that leads to 10ms per Pulse. Timer1 value will be at 20.000 after 10ms.
			Sensors.mRpm.set_exact((uint32_t)60000000UL / (((uint32_t)Sensors.mRpm.overflows<<16) + timerValue));
			Sensors.mRpm.overflows=0;

			//	char buffer[50];
			//	sprintf(buffer,"--> %8lu,%8lu,%8i <--\r\n",Millis.get(),TIM_GetCounter(TIM3),Sensors.mRpm.get_exact());
			//	Serial.puts(USART1, buffer);
		}
	}
}
	///////////////////// INPUT INTERRUPT //////////////////
		
	
-----------------------------------------------------------------------------------------------------------------------------------
	
1. Usart2 zum senden nutzen
2. SD karte auslesen testen
3. Display ?
4. 	
