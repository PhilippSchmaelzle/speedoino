
stk500boot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00007da4  00000618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005a4  00007800  00007800  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000062d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005ff  00000000  00000000  0000065d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001f6  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002e2  00000000  00000000  00000e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000004c  00000000  00000000  00001134  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000204  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000947  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f8  00000000  00000000  00001ccb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007800 <__jumpMain>:
 * to reduce the code size, we need to provide our own initialization
 */
void __jumpMain     (void) __attribute__ ((naked)) __attribute__ ((section (".init9")));

void __jumpMain(void)
{    
    7800:	8f ef       	ldi	r24, 0xFF	; 255
	asm volatile ( ".set __stack, %0" :: "i" (RAMEND) );

	/* init stack here, bug WinAVR 20071221 does not init stack based on __stack */  
	asm volatile ("ldi r24,%0":: "M" (RAMEND & 0xFF));          
	asm volatile ("ldi r25,%0":: "M" (RAMEND >> 8));
    7802:	98 e0       	ldi	r25, 0x08	; 8
	asm volatile ("out __SP_H__,r25" ::);
    7804:	9e bf       	out	0x3e, r25	; 62
	asm volatile ("out __SP_L__,r24" ::);
    7806:	8d bf       	out	0x3d, r24	; 61

	asm volatile ( "clr __zero_reg__" );                       // GCC depends on register r1 set to 0
    7808:	11 24       	eor	r1, r1
	asm volatile ( "out %0, __zero_reg__" :: "I" (_SFR_IO_ADDR(SREG)) );  // set SREG to 0
    780a:	1f be       	out	0x3f, r1	; 63
	asm volatile ( "rjmp main");                               // jump to main()
    780c:	0c c0       	rjmp	.+24     	; 0x7826 <main>

0000780e <sendchar>:
/*
 * send single byte to USART, wait until transmission is completed
 */
static void sendchar(char c)
{
	UART_DATA_REG = c;                                         // prepare transmission
    780e:	80 93 c6 00 	sts	0x00C6, r24
	while (!(UART_STATUS_REG & (1 << UART_TRANSMIT_COMPLETE)));// wait until byte sent
    7812:	80 91 c0 00 	lds	r24, 0x00C0
    7816:	86 ff       	sbrs	r24, 6
    7818:	fc cf       	rjmp	.-8      	; 0x7812 <sendchar+0x4>
	UART_STATUS_REG |= (1 << UART_TRANSMIT_COMPLETE);          // delete TXCflag
    781a:	80 91 c0 00 	lds	r24, 0x00C0
    781e:	80 64       	ori	r24, 0x40	; 64
    7820:	80 93 c0 00 	sts	0x00C0, r24
    7824:	08 95       	ret

00007826 <main>:
}


int main(void) __attribute__ ((OS_main));
int main(void)
{
    7826:	cd b7       	in	r28, 0x3d	; 61
    7828:	de b7       	in	r29, 0x3e	; 62
    782a:	c5 52       	subi	r28, 0x25	; 37
    782c:	d1 40       	sbci	r29, 0x01	; 1
    782e:	de bf       	out	0x3e, r29	; 62
    7830:	cd bf       	out	0x3d, r28	; 61
	wdt_enable(WDTO_500MS);
    7832:	2d e0       	ldi	r18, 0x0D	; 13
    7834:	88 e1       	ldi	r24, 0x18	; 24
    7836:	90 e0       	ldi	r25, 0x00	; 0
    7838:	0f b6       	in	r0, 0x3f	; 63
    783a:	f8 94       	cli
    783c:	a8 95       	wdr
    783e:	80 93 60 00 	sts	0x0060, r24
    7842:	0f be       	out	0x3f, r0	; 63
    7844:	20 93 60 00 	sts	0x0060, r18
	/*
	 * Init UART
	 * set baudrate and enable USART receiver and transmiter without interrupts
	 */
#if UART_BAUDRATE_DOUBLE_SPEED
	UART_STATUS_REG		|=	(1 <<UART_DOUBLE_SPEED);
    7848:	80 91 c0 00 	lds	r24, 0x00C0
    784c:	82 60       	ori	r24, 0x02	; 2
    784e:	80 93 c0 00 	sts	0x00C0, r24
#endif
	UART_BAUD_RATE_LOW	=	UART_BAUD_SELECT(BAUDRATE,F_CPU);
    7852:	80 e1       	ldi	r24, 0x10	; 16
    7854:	80 93 c4 00 	sts	0x00C4, r24
	UART_CONTROL_REG	=	(1 << UART_ENABLE_RECEIVER) | (1 << UART_ENABLE_TRANSMITTER);
    7858:	88 e1       	ldi	r24, 0x18	; 24
    785a:	80 93 c1 00 	sts	0x00C1, r24


	msgLength		=	11;
	msgBuffer[0] 	=	CMD_SIGN_ON;
    785e:	81 e0       	ldi	r24, 0x01	; 1
    7860:	89 83       	std	Y+1, r24	; 0x01
	msgBuffer[1] 	=	STATUS_CMD_OK;
    7862:	1a 82       	std	Y+2, r1	; 0x02
	msgBuffer[2] 	=	8;
    7864:	88 e0       	ldi	r24, 0x08	; 8
    7866:	8b 83       	std	Y+3, r24	; 0x03
	msgBuffer[3] 	=	'A';
    7868:	81 e4       	ldi	r24, 0x41	; 65
    786a:	8c 83       	std	Y+4, r24	; 0x04
	msgBuffer[4] 	=	'V';
    786c:	86 e5       	ldi	r24, 0x56	; 86
    786e:	8d 83       	std	Y+5, r24	; 0x05
	msgBuffer[5] 	=	'R';
    7870:	82 e5       	ldi	r24, 0x52	; 82
    7872:	8e 83       	std	Y+6, r24	; 0x06
	msgBuffer[6] 	=	'I';
    7874:	89 e4       	ldi	r24, 0x49	; 73
    7876:	8f 83       	std	Y+7, r24	; 0x07
	msgBuffer[7] 	=	'S';
    7878:	83 e5       	ldi	r24, 0x53	; 83
    787a:	88 87       	std	Y+8, r24	; 0x08
	msgBuffer[8] 	=	'P';
    787c:	80 e5       	ldi	r24, 0x50	; 80
    787e:	89 87       	std	Y+9, r24	; 0x09
	msgBuffer[9] 	=	'_';
    7880:	8f e5       	ldi	r24, 0x5F	; 95
    7882:	8a 87       	std	Y+10, r24	; 0x0a
	msgBuffer[10]	=	'2';
    7884:	82 e3       	ldi	r24, 0x32	; 50
    7886:	8b 87       	std	Y+11, r24	; 0x0b
	sendchar(MESSAGE_START);
    7888:	8b e1       	ldi	r24, 0x1B	; 27
    788a:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	checksum	=	MESSAGE_START^0;

	sendchar(seqNum);
    788e:	81 e0       	ldi	r24, 0x01	; 1
    7890:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	checksum	^=	seqNum;

	c			=	((msgLength>>8)&0xFF);
	sendchar(c);
    7894:	80 e0       	ldi	r24, 0x00	; 0
    7896:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	checksum	^=	c;

	c			=	msgLength&0x00FF;
	sendchar(c);
    789a:	8b e0       	ldi	r24, 0x0B	; 11
    789c:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	checksum ^= c;

	sendchar(TOKEN);
    78a0:	8e e0       	ldi	r24, 0x0E	; 14
    78a2:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	checksum ^= TOKEN;

	p	=	msgBuffer;
    78a6:	8e 01       	movw	r16, r28
    78a8:	0f 5f       	subi	r16, 0xFF	; 255
    78aa:	1f 4f       	sbci	r17, 0xFF	; 255
	c			=	msgLength&0x00FF;
	sendchar(c);
	checksum ^= c;

	sendchar(TOKEN);
	checksum ^= TOKEN;
    78ac:	5f e1       	ldi	r21, 0x1F	; 31
    78ae:	65 2e       	mov	r6, r21
	return UART_DATA_REG;
}


int main(void) __attribute__ ((OS_main));
int main(void)
    78b0:	7e 01       	movw	r14, r28
    78b2:	2c e0       	ldi	r18, 0x0C	; 12
    78b4:	e2 0e       	add	r14, r18
    78b6:	f1 1c       	adc	r15, r1
	checksum ^= TOKEN;

	p	=	msgBuffer;
	while ( msgLength )
	{
		c	=	*p++;
    78b8:	f8 01       	movw	r30, r16
    78ba:	d1 90       	ld	r13, Z+
    78bc:	8f 01       	movw	r16, r30
		sendchar(c);
    78be:	8d 2d       	mov	r24, r13
    78c0:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
		checksum ^=c;
    78c4:	6d 24       	eor	r6, r13

	sendchar(TOKEN);
	checksum ^= TOKEN;

	p	=	msgBuffer;
	while ( msgLength )
    78c6:	0e 15       	cp	r16, r14
    78c8:	1f 05       	cpc	r17, r15
    78ca:	b1 f7       	brne	.-20     	; 0x78b8 <main+0x92>
		c	=	*p++;
		sendchar(c);
		checksum ^=c;
		msgLength--;
	}
	sendchar(checksum);
    78cc:	86 2d       	mov	r24, r6
    78ce:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
	unsigned char   isLeave = 0;
	unsigned long	boot_timeout;
	unsigned long	boot_timer;
	unsigned int	boot_state;

	boot_timer	 =	0;
    78d2:	40 e0       	ldi	r20, 0x00	; 0
    78d4:	50 e0       	ldi	r21, 0x00	; 0
    78d6:	ba 01       	movw	r22, r20
    78d8:	20 c0       	rjmp	.+64     	; 0x791a <main+0xf4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    78da:	f5 e0       	ldi	r31, 0x05	; 5
    78dc:	fa 95       	dec	r31
    78de:	f1 f7       	brne	.-4      	; 0x78dc <main+0xb6>
    78e0:	00 00       	nop
	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
		{
			_delay_ms(0.001);
			boot_timer++;
    78e2:	4f 5f       	subi	r20, 0xFF	; 255
    78e4:	5f 4f       	sbci	r21, 0xFF	; 255
    78e6:	6f 4f       	sbci	r22, 0xFF	; 255
    78e8:	7f 4f       	sbci	r23, 0xFF	; 255

			if (boot_timer > boot_timeout)
    78ea:	21 e0       	ldi	r18, 0x01	; 1
    78ec:	30 e0       	ldi	r19, 0x00	; 0
    78ee:	41 39       	cpi	r20, 0x91	; 145
    78f0:	80 ed       	ldi	r24, 0xD0	; 208
    78f2:	58 07       	cpc	r21, r24
    78f4:	83 e0       	ldi	r24, 0x03	; 3
    78f6:	68 07       	cpc	r22, r24
    78f8:	71 05       	cpc	r23, r1
    78fa:	10 f4       	brcc	.+4      	; 0x7900 <main+0xda>
    78fc:	20 e0       	ldi	r18, 0x00	; 0
    78fe:	30 e0       	ldi	r19, 0x00	; 0
			{
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
			}

			wdt_reset();
    7900:	a8 95       	wdr


//************************************************************************
static int	Serial_Available(void)
{
	return(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE));	// wait for data
    7902:	80 91 c0 00 	lds	r24, 0x00C0
	sendchar(checksum);
	seqNum++;

	while (boot_state==0)
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
    7906:	87 ff       	sbrs	r24, 7
    7908:	04 c0       	rjmp	.+8      	; 0x7912 <main+0xec>
				boot_state	=	1; // (after ++ -> boot_state=2 bootloader timeout, jump to main 0x00000 )
			}

			wdt_reset();
		}
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
    790a:	2f 5f       	subi	r18, 0xFF	; 255
    790c:	3f 4f       	sbci	r19, 0xFF	; 255
		msgLength--;
	}
	sendchar(checksum);
	seqNum++;

	while (boot_state==0)
    790e:	29 f0       	breq	.+10     	; 0x791a <main+0xf4>
    7910:	07 c0       	rjmp	.+14     	; 0x7920 <main+0xfa>
	{
		while ((!(Serial_Available())) && (boot_state == 0))		// wait for data
    7912:	21 15       	cp	r18, r1
    7914:	31 05       	cpc	r19, r1
    7916:	09 f3       	breq	.-62     	; 0x78da <main+0xb4>
    7918:	f8 cf       	rjmp	.-16     	; 0x790a <main+0xe4>
	p	=	msgBuffer;
	while ( msgLength )
	{
		c	=	*p++;
		sendchar(c);
		checksum ^=c;
    791a:	20 e0       	ldi	r18, 0x00	; 0
    791c:	30 e0       	ldi	r19, 0x00	; 0
    791e:	f1 cf       	rjmp	.-30     	; 0x7902 <main+0xdc>
		}
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
	}


	if (boot_state==1)
    7920:	21 30       	cpi	r18, 0x01	; 1
    7922:	31 05       	cpc	r19, r1
    7924:	71 f0       	breq	.+28     	; 0x7942 <main+0x11c>
		}	//while

	}	//if


	asm volatile ("nop");			// wait until port has changed
    7926:	00 00       	nop

	/*
	 * Now leave bootloader
	 */

	UART_STATUS_REG	&=	0xfd;
    7928:	80 91 c0 00 	lds	r24, 0x00C0
    792c:	8d 7f       	andi	r24, 0xFD	; 253
    792e:	80 93 c0 00 	sts	0x00C0, r24
	boot_rww_enable();				// enable application section
    7932:	81 e1       	ldi	r24, 0x11	; 17
    7934:	80 93 57 00 	sts	0x0057, r24
    7938:	e8 95       	spm


	asm volatile(
    793a:	ee 27       	eor	r30, r30
    793c:	ff 27       	eor	r31, r31
    793e:	09 94       	ijmp
    7940:	28 c2       	rjmp	.+1104   	; 0x7d92 <main+0x56c>
		}
		boot_state++; // ( if boot_state=1 bootloader received byte from UART, enter bootloader mode)
	}


	if (boot_state==1)
    7942:	42 e0       	ldi	r20, 0x02	; 2
    7944:	74 2e       	mov	r7, r20
    7946:	c1 2c       	mov	r12, r1
    7948:	d1 2c       	mov	r13, r1
    794a:	a1 2c       	mov	r10, r1
    794c:	b1 2c       	mov	r11, r1
    794e:	e1 2c       	mov	r14, r1
    7950:	f1 2c       	mov	r15, r1
		{
			unsigned int	data;
#if (FLASHEND > 0x0FFFF)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
    7952:	f6 01       	movw	r30, r12
    7954:	85 91       	lpm	r24, Z+
    7956:	94 91       	lpm	r25, Z+
    7958:	cc 5d       	subi	r28, 0xDC	; 220
    795a:	de 4f       	sbci	r29, 0xFE	; 254
    795c:	99 83       	std	Y+1, r25	; 0x01
    795e:	88 83       	st	Y, r24
    7960:	c4 52       	subi	r28, 0x24	; 36
    7962:	d1 40       	sbci	r29, 0x01	; 1
	if (boot_state==1)
	{
		//*	main loop
		while (!isLeave)
		{
			wdt_reset();
    7964:	a8 95       	wdr
    7966:	00 e0       	ldi	r16, 0x00	; 0
    7968:	10 e0       	ldi	r17, 0x00	; 0
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
    796a:	80 e0       	ldi	r24, 0x00	; 0
    796c:	02 c0       	rjmp	.+4      	; 0x7972 <main+0x14c>
    796e:	20 e0       	ldi	r18, 0x00	; 0
    7970:	30 e0       	ldi	r19, 0x00	; 0
			while ( msgParseState != ST_PROCESS )
			{
				wdt_reset();
    7972:	a8 95       	wdr
				if (boot_state==1)
    7974:	21 30       	cpi	r18, 0x01	; 1
    7976:	31 05       	cpc	r19, r1
    7978:	c1 f4       	brne	.+48     	; 0x79aa <main+0x184>
    797a:	1e c0       	rjmp	.+60     	; 0x79b8 <main+0x192>
	uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
	{
		// wait for data
		count++;
    797c:	4f 5f       	subi	r20, 0xFF	; 255
    797e:	5f 4f       	sbci	r21, 0xFF	; 255
    7980:	6f 4f       	sbci	r22, 0xFF	; 255
    7982:	7f 4f       	sbci	r23, 0xFF	; 255
		if (count > MAX_TIME_COUNT)
    7984:	41 30       	cpi	r20, 0x01	; 1
    7986:	92 e1       	ldi	r25, 0x12	; 18
    7988:	59 07       	cpc	r21, r25
    798a:	9a e7       	ldi	r25, 0x7A	; 122
    798c:	69 07       	cpc	r22, r25
    798e:	71 05       	cpc	r23, r1
    7990:	78 f0       	brcs	.+30     	; 0x79b0 <main+0x18a>
#if (FLASHEND > 0x0FFFF)
			data	=	pgm_read_word_far(0);	//*	get the first word of the user program
#else
			data	=	pgm_read_word_near(0);	//*	get the first word of the user program
#endif
			if (data != 0xffff)					//*	make sure its valid before jumping to it.
    7992:	cc 5d       	subi	r28, 0xDC	; 220
    7994:	de 4f       	sbci	r29, 0xFE	; 254
    7996:	28 81       	ld	r18, Y
    7998:	39 81       	ldd	r19, Y+1	; 0x01
    799a:	c4 52       	subi	r28, 0x24	; 36
    799c:	d1 40       	sbci	r29, 0x01	; 1
    799e:	2f 3f       	cpi	r18, 0xFF	; 255
    79a0:	3f 4f       	sbci	r19, 0xFF	; 255
    79a2:	19 f0       	breq	.+6      	; 0x79aa <main+0x184>
			{
				asm volatile(
    79a4:	ee 27       	eor	r30, r30
    79a6:	ff 27       	eor	r31, r31
    79a8:	09 94       	ijmp
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
			{
				wdt_reset();
				if (boot_state==1)
    79aa:	40 e0       	ldi	r20, 0x00	; 0
    79ac:	50 e0       	ldi	r21, 0x00	; 0
    79ae:	ba 01       	movw	r22, r20
#define	 MAX_TIME_COUNT	(F_CPU >> 1)
static unsigned char recchar_timeout(void)
{
	uint32_t count = 0;

	while (!(UART_STATUS_REG & (1 << UART_RECEIVE_COMPLETE)))
    79b0:	20 91 c0 00 	lds	r18, 0x00C0
    79b4:	27 ff       	sbrs	r18, 7
    79b6:	e2 cf       	rjmp	.-60     	; 0x797c <main+0x156>
				);
			}
			count	=	0;
		}
	}
	return UART_DATA_REG;
    79b8:	20 91 c6 00 	lds	r18, 0x00C6
				//										sendchar('c');
				//										sendchar(':');
				//										sendchar(c);


				switch (msgParseState){
    79bc:	83 30       	cpi	r24, 0x03	; 3
    79be:	e1 f0       	breq	.+56     	; 0x79f8 <main+0x1d2>
    79c0:	20 f4       	brcc	.+8      	; 0x79ca <main+0x1a4>
    79c2:	81 30       	cpi	r24, 0x01	; 1
    79c4:	61 f0       	breq	.+24     	; 0x79de <main+0x1b8>
    79c6:	98 f4       	brcc	.+38     	; 0x79ee <main+0x1c8>
    79c8:	07 c0       	rjmp	.+14     	; 0x79d8 <main+0x1b2>
    79ca:	85 30       	cpi	r24, 0x05	; 5
    79cc:	09 f1       	breq	.+66     	; 0x7a10 <main+0x1ea>
    79ce:	c0 f0       	brcs	.+48     	; 0x7a00 <main+0x1da>
    79d0:	86 30       	cpi	r24, 0x06	; 6
    79d2:	09 f0       	breq	.+2      	; 0x79d6 <main+0x1b0>
    79d4:	60 c0       	rjmp	.+192    	; 0x7a96 <main+0x270>
    79d6:	2c c0       	rjmp	.+88     	; 0x7a30 <main+0x20a>
				case ST_START:
					if ( c == MESSAGE_START )
    79d8:	2b 31       	cpi	r18, 0x1B	; 27
    79da:	49 f6       	brne	.-110    	; 0x796e <main+0x148>
    79dc:	db c1       	rjmp	.+950    	; 0x7d94 <main+0x56e>
						checksum		=	MESSAGE_START^0;
					}
					break;

				case ST_GET_SEQ_NUM:
					if ( (c == 1) || (c == seqNum) )
    79de:	21 30       	cpi	r18, 0x01	; 1
    79e0:	11 f0       	breq	.+4      	; 0x79e6 <main+0x1c0>
    79e2:	27 11       	cpse	r18, r7
    79e4:	dd c1       	rjmp	.+954    	; 0x7da0 <main+0x57a>
					{
						seqNum			=	c;
						msgParseState	=	ST_MSG_SIZE_1;
						checksum		^=	c;
    79e6:	62 26       	eor	r6, r18
    79e8:	72 2e       	mov	r7, r18

				case ST_GET_SEQ_NUM:
					if ( (c == 1) || (c == seqNum) )
					{
						seqNum			=	c;
						msgParseState	=	ST_MSG_SIZE_1;
    79ea:	82 e0       	ldi	r24, 0x02	; 2
						checksum		^=	c;
    79ec:	c0 cf       	rjmp	.-128    	; 0x796e <main+0x148>
						msgParseState	=	ST_START;
					}
					break;

				case ST_MSG_SIZE_1:
					msgLength		=	c<<8;
    79ee:	12 2f       	mov	r17, r18
    79f0:	00 e0       	ldi	r16, 0x00	; 0
					msgParseState	=	ST_MSG_SIZE_2;
					checksum		^=	c;
    79f2:	62 26       	eor	r6, r18
					}
					break;

				case ST_MSG_SIZE_1:
					msgLength		=	c<<8;
					msgParseState	=	ST_MSG_SIZE_2;
    79f4:	83 e0       	ldi	r24, 0x03	; 3
					checksum		^=	c;
					break;
    79f6:	bb cf       	rjmp	.-138    	; 0x796e <main+0x148>

				case ST_MSG_SIZE_2:
					msgLength		|=	c;
    79f8:	02 2b       	or	r16, r18
					msgParseState	=	ST_GET_TOKEN;
					checksum		^=	c;
    79fa:	62 26       	eor	r6, r18
					checksum		^=	c;
					break;

				case ST_MSG_SIZE_2:
					msgLength		|=	c;
					msgParseState	=	ST_GET_TOKEN;
    79fc:	84 e0       	ldi	r24, 0x04	; 4
					checksum		^=	c;
					break;
    79fe:	b7 cf       	rjmp	.-146    	; 0x796e <main+0x148>

				case ST_GET_TOKEN:
					if ( c == TOKEN )
    7a00:	2e 30       	cpi	r18, 0x0E	; 14
    7a02:	09 f0       	breq	.+2      	; 0x7a06 <main+0x1e0>
    7a04:	cd c1       	rjmp	.+922    	; 0x7da0 <main+0x57a>
					{
						msgParseState	=	ST_GET_DATA;
						checksum		^=	c;
    7a06:	62 26       	eor	r6, r18
						ii				=	0;
    7a08:	c1 2c       	mov	r12, r1
    7a0a:	d1 2c       	mov	r13, r1
					break;

				case ST_GET_TOKEN:
					if ( c == TOKEN )
					{
						msgParseState	=	ST_GET_DATA;
    7a0c:	85 e0       	ldi	r24, 0x05	; 5
    7a0e:	af cf       	rjmp	.-162    	; 0x796e <main+0x148>
						msgParseState	=	ST_START;
					}
					break;

				case ST_GET_DATA:
					msgBuffer[ii++]	=	c;
    7a10:	e1 e0       	ldi	r30, 0x01	; 1
    7a12:	f0 e0       	ldi	r31, 0x00	; 0
    7a14:	ec 0f       	add	r30, r28
    7a16:	fd 1f       	adc	r31, r29
    7a18:	ec 0d       	add	r30, r12
    7a1a:	fd 1d       	adc	r31, r13
    7a1c:	20 83       	st	Z, r18
    7a1e:	9f ef       	ldi	r25, 0xFF	; 255
    7a20:	c9 1a       	sub	r12, r25
    7a22:	d9 0a       	sbc	r13, r25
					checksum		^=	c;
    7a24:	62 26       	eor	r6, r18
					if (ii == msgLength )
    7a26:	c0 16       	cp	r12, r16
    7a28:	d1 06       	cpc	r13, r17
    7a2a:	09 f0       	breq	.+2      	; 0x7a2e <main+0x208>
    7a2c:	a0 cf       	rjmp	.-192    	; 0x796e <main+0x148>
    7a2e:	b6 c1       	rjmp	.+876    	; 0x7d9c <main+0x576>
						msgParseState	=	ST_GET_CHECK;
					}
					break;

				case ST_GET_CHECK:
					if ( c == checksum )
    7a30:	26 11       	cpse	r18, r6
    7a32:	b6 c1       	rjmp	.+876    	; 0x7da0 <main+0x57a>

			/*
			 * Now process the STK500 commands, see Atmel Appnote AVR068
			 */

			switch (msgBuffer[0])
    7a34:	89 81       	ldd	r24, Y+1	; 0x01
    7a36:	83 31       	cpi	r24, 0x13	; 19
    7a38:	09 f4       	brne	.+2      	; 0x7a3c <main+0x216>
    7a3a:	c2 c0       	rjmp	.+388    	; 0x7bc0 <main+0x39a>
    7a3c:	b0 f4       	brcc	.+44     	; 0x7a6a <main+0x244>
    7a3e:	86 30       	cpi	r24, 0x06	; 6
    7a40:	09 f4       	brne	.+2      	; 0x7a44 <main+0x21e>
    7a42:	a8 c0       	rjmp	.+336    	; 0x7b94 <main+0x36e>
    7a44:	48 f4       	brcc	.+18     	; 0x7a58 <main+0x232>
    7a46:	82 30       	cpi	r24, 0x02	; 2
    7a48:	49 f1       	breq	.+82     	; 0x7a9c <main+0x276>
    7a4a:	83 30       	cpi	r24, 0x03	; 3
    7a4c:	09 f4       	brne	.+2      	; 0x7a50 <main+0x22a>
    7a4e:	59 c0       	rjmp	.+178    	; 0x7b02 <main+0x2dc>
    7a50:	81 30       	cpi	r24, 0x01	; 1
    7a52:	09 f0       	breq	.+2      	; 0x7a56 <main+0x230>
    7a54:	66 c1       	rjmp	.+716    	; 0x7d22 <main+0x4fc>
    7a56:	3e c0       	rjmp	.+124    	; 0x7ad4 <main+0x2ae>
    7a58:	81 31       	cpi	r24, 0x11	; 17
    7a5a:	09 f4       	brne	.+2      	; 0x7a5e <main+0x238>
    7a5c:	62 c0       	rjmp	.+196    	; 0x7b22 <main+0x2fc>
    7a5e:	08 f0       	brcs	.+2      	; 0x7a62 <main+0x23c>
    7a60:	92 c0       	rjmp	.+292    	; 0x7b86 <main+0x360>
    7a62:	80 31       	cpi	r24, 0x10	; 16
    7a64:	09 f0       	breq	.+2      	; 0x7a68 <main+0x242>
    7a66:	5d c1       	rjmp	.+698    	; 0x7d22 <main+0x4fc>
    7a68:	19 c0       	rjmp	.+50     	; 0x7a9c <main+0x276>
    7a6a:	88 31       	cpi	r24, 0x18	; 24
    7a6c:	09 f4       	brne	.+2      	; 0x7a70 <main+0x24a>
    7a6e:	75 c0       	rjmp	.+234    	; 0x7b5a <main+0x334>
    7a70:	48 f4       	brcc	.+18     	; 0x7a84 <main+0x25e>
    7a72:	85 31       	cpi	r24, 0x15	; 21
    7a74:	09 f4       	brne	.+2      	; 0x7a78 <main+0x252>
    7a76:	a4 c0       	rjmp	.+328    	; 0x7bc0 <main+0x39a>
    7a78:	08 f4       	brcc	.+2      	; 0x7a7c <main+0x256>
    7a7a:	0a c1       	rjmp	.+532    	; 0x7c90 <main+0x46a>
    7a7c:	86 31       	cpi	r24, 0x16	; 22
    7a7e:	09 f0       	breq	.+2      	; 0x7a82 <main+0x25c>
    7a80:	50 c1       	rjmp	.+672    	; 0x7d22 <main+0x4fc>
    7a82:	06 c1       	rjmp	.+524    	; 0x7c90 <main+0x46a>
    7a84:	8b 31       	cpi	r24, 0x1B	; 27
    7a86:	09 f4       	brne	.+2      	; 0x7a8a <main+0x264>
    7a88:	50 c0       	rjmp	.+160    	; 0x7b2a <main+0x304>
    7a8a:	8d 31       	cpi	r24, 0x1D	; 29
    7a8c:	49 f0       	breq	.+18     	; 0x7aa0 <main+0x27a>
    7a8e:	8a 31       	cpi	r24, 0x1A	; 26
    7a90:	09 f0       	breq	.+2      	; 0x7a94 <main+0x26e>
    7a92:	47 c1       	rjmp	.+654    	; 0x7d22 <main+0x4fc>
    7a94:	55 c0       	rjmp	.+170    	; 0x7b40 <main+0x31a>
			wdt_reset();
			/*
			 * Collect received bytes to a complete message
			 */
			msgParseState	=	ST_START;
			while ( msgParseState != ST_PROCESS )
    7a96:	87 30       	cpi	r24, 0x07	; 7
    7a98:	69 f2       	breq	.-102    	; 0x7a34 <main+0x20e>
    7a9a:	69 cf       	rjmp	.-302    	; 0x796e <main+0x148>

			/*
			 * Now process the STK500 commands, see Atmel Appnote AVR068
			 */

			switch (msgBuffer[0])
    7a9c:	51 2c       	mov	r5, r1
    7a9e:	43 c0       	rjmp	.+134    	; 0x7b26 <main+0x300>
			case CMD_SPI_MULTI:
			{
				unsigned char answerByte = 0;

				// only Read Signature Bytes implemented, return dummy value for other instructions
				if ( msgBuffer[4]== 0x30 )
    7aa0:	9d 81       	ldd	r25, Y+5	; 0x05
    7aa2:	90 33       	cpi	r25, 0x30	; 48
    7aa4:	39 f4       	brne	.+14     	; 0x7ab4 <main+0x28e>
				{
					unsigned char signatureIndex = msgBuffer[6];
    7aa6:	8f 81       	ldd	r24, Y+7	; 0x07

					if ( signatureIndex == 0 )
    7aa8:	88 23       	and	r24, r24
    7aaa:	31 f0       	breq	.+12     	; 0x7ab8 <main+0x292>
						answerByte = (SIGNATURE_BYTES >>16) & 0x000000FF;
					else if ( signatureIndex == 1 )
    7aac:	81 30       	cpi	r24, 0x01	; 1
    7aae:	31 f4       	brne	.+12     	; 0x7abc <main+0x296>
						answerByte = (SIGNATURE_BYTES >> 8) & 0x000000FF;
    7ab0:	85 e9       	ldi	r24, 0x95	; 149
    7ab2:	05 c0       	rjmp	.+10     	; 0x7abe <main+0x298>

			switch (msgBuffer[0])
			{
			case CMD_SPI_MULTI:
			{
				unsigned char answerByte = 0;
    7ab4:	80 e0       	ldi	r24, 0x00	; 0
    7ab6:	03 c0       	rjmp	.+6      	; 0x7abe <main+0x298>
				if ( msgBuffer[4]== 0x30 )
				{
					unsigned char signatureIndex = msgBuffer[6];

					if ( signatureIndex == 0 )
						answerByte = (SIGNATURE_BYTES >>16) & 0x000000FF;
    7ab8:	8e e1       	ldi	r24, 0x1E	; 30
    7aba:	01 c0       	rjmp	.+2      	; 0x7abe <main+0x298>
					else if ( signatureIndex == 1 )
						answerByte = (SIGNATURE_BYTES >> 8) & 0x000000FF;
					else
						answerByte = SIGNATURE_BYTES & 0x000000FF;
    7abc:	8f e0       	ldi	r24, 0x0F	; 15
				}
				msgLength = 7;
				msgBuffer[1] = STATUS_CMD_OK;
    7abe:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = 0;
    7ac0:	1b 82       	std	Y+3, r1	; 0x03
				msgBuffer[3] = msgBuffer[4];  // Instruction Byte 1
    7ac2:	9c 83       	std	Y+4, r25	; 0x04
				msgBuffer[4] = msgBuffer[5];  // Instruction Byte 2
    7ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    7ac6:	9d 83       	std	Y+5, r25	; 0x05
				msgBuffer[5] = answerByte;
    7ac8:	8e 83       	std	Y+6, r24	; 0x06
				msgBuffer[6] = STATUS_CMD_OK;
    7aca:	1f 82       	std	Y+7, r1	; 0x07
			}
			break;
    7acc:	51 2c       	mov	r5, r1
					else if ( signatureIndex == 1 )
						answerByte = (SIGNATURE_BYTES >> 8) & 0x000000FF;
					else
						answerByte = SIGNATURE_BYTES & 0x000000FF;
				}
				msgLength = 7;
    7ace:	07 e0       	ldi	r16, 0x07	; 7
    7ad0:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[3] = msgBuffer[4];  // Instruction Byte 1
				msgBuffer[4] = msgBuffer[5];  // Instruction Byte 2
				msgBuffer[5] = answerByte;
				msgBuffer[6] = STATUS_CMD_OK;
			}
			break;
    7ad2:	2e c1       	rjmp	.+604    	; 0x7d30 <main+0x50a>

			case CMD_SIGN_ON:
				msgLength = 11;
				msgBuffer[1]  = STATUS_CMD_OK;
    7ad4:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2]  = 8;
    7ad6:	88 e0       	ldi	r24, 0x08	; 8
    7ad8:	8b 83       	std	Y+3, r24	; 0x03
				msgBuffer[3]  = 'A';
    7ada:	81 e4       	ldi	r24, 0x41	; 65
    7adc:	8c 83       	std	Y+4, r24	; 0x04
				msgBuffer[4]  = 'V';
    7ade:	86 e5       	ldi	r24, 0x56	; 86
    7ae0:	8d 83       	std	Y+5, r24	; 0x05
				msgBuffer[5]  = 'R';
    7ae2:	82 e5       	ldi	r24, 0x52	; 82
    7ae4:	8e 83       	std	Y+6, r24	; 0x06
				msgBuffer[6]  = 'I';
    7ae6:	89 e4       	ldi	r24, 0x49	; 73
    7ae8:	8f 83       	std	Y+7, r24	; 0x07
				msgBuffer[7]  = 'S';
    7aea:	83 e5       	ldi	r24, 0x53	; 83
    7aec:	88 87       	std	Y+8, r24	; 0x08
				msgBuffer[8]  = 'P';
    7aee:	80 e5       	ldi	r24, 0x50	; 80
    7af0:	89 87       	std	Y+9, r24	; 0x09
				msgBuffer[9]  = '_';
    7af2:	8f e5       	ldi	r24, 0x5F	; 95
    7af4:	8a 87       	std	Y+10, r24	; 0x0a
				msgBuffer[10] = '2';
    7af6:	82 e3       	ldi	r24, 0x32	; 50
    7af8:	8b 87       	std	Y+11, r24	; 0x0b
				break;
    7afa:	51 2c       	mov	r5, r1
				msgBuffer[6] = STATUS_CMD_OK;
			}
			break;

			case CMD_SIGN_ON:
				msgLength = 11;
    7afc:	0b e0       	ldi	r16, 0x0B	; 11
    7afe:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[6]  = 'I';
				msgBuffer[7]  = 'S';
				msgBuffer[8]  = 'P';
				msgBuffer[9]  = '_';
				msgBuffer[10] = '2';
				break;
    7b00:	17 c1       	rjmp	.+558    	; 0x7d30 <main+0x50a>
    7b02:	aa 81       	ldd	r26, Y+2	; 0x02
    7b04:	a0 59       	subi	r26, 0x90	; 144
    7b06:	a3 30       	cpi	r26, 0x03	; 3
    7b08:	28 f4       	brcc	.+10     	; 0x7b14 <main+0x2ee>
    7b0a:	b0 e0       	ldi	r27, 0x00	; 0
    7b0c:	a0 50       	subi	r26, 0x00	; 0
    7b0e:	bf 4f       	sbci	r27, 0xFF	; 255
    7b10:	8c 91       	ld	r24, X
    7b12:	01 c0       	rjmp	.+2      	; 0x7b16 <main+0x2f0>

			case CMD_GET_PARAMETER:
			{
				unsigned char value;

				switch(msgBuffer[1])
    7b14:	80 e0       	ldi	r24, 0x00	; 0
				default:
					value = 0;
					break;
				}
				msgLength = 3;
				msgBuffer[1] = STATUS_CMD_OK;
    7b16:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = value;
    7b18:	8b 83       	std	Y+3, r24	; 0x03
			}
			break;
    7b1a:	51 2c       	mov	r5, r1
					break;
				default:
					value = 0;
					break;
				}
				msgLength = 3;
    7b1c:	03 e0       	ldi	r16, 0x03	; 3
    7b1e:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[1] = STATUS_CMD_OK;
				msgBuffer[2] = value;
			}
			break;
    7b20:	07 c1       	rjmp	.+526    	; 0x7d30 <main+0x50a>

			case CMD_LEAVE_PROGMODE_ISP:
				isLeave = 1;
    7b22:	55 24       	eor	r5, r5
    7b24:	53 94       	inc	r5
			case CMD_ENTER_PROGMODE_ISP:
			case CMD_SET_PARAMETER:
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
    7b26:	1a 82       	std	Y+2, r1	; 0x02
    7b28:	ff c0       	rjmp	.+510    	; 0x7d28 <main+0x502>
				break;

			case CMD_READ_SIGNATURE_ISP:
			{
				unsigned char signatureIndex = msgBuffer[4];
    7b2a:	8d 81       	ldd	r24, Y+5	; 0x05
				unsigned char signature;

				if ( signatureIndex == 0 )
    7b2c:	88 23       	and	r24, r24
    7b2e:	21 f0       	breq	.+8      	; 0x7b38 <main+0x312>
					signature = (SIGNATURE_BYTES >>16) & 0x000000FF;
				else if ( signatureIndex == 1 )
    7b30:	81 30       	cpi	r24, 0x01	; 1
    7b32:	21 f4       	brne	.+8      	; 0x7b3c <main+0x316>
					signature = (SIGNATURE_BYTES >> 8) & 0x000000FF;
    7b34:	85 e9       	ldi	r24, 0x95	; 149
    7b36:	24 c0       	rjmp	.+72     	; 0x7b80 <main+0x35a>
			{
				unsigned char signatureIndex = msgBuffer[4];
				unsigned char signature;

				if ( signatureIndex == 0 )
					signature = (SIGNATURE_BYTES >>16) & 0x000000FF;
    7b38:	8e e1       	ldi	r24, 0x1E	; 30
    7b3a:	22 c0       	rjmp	.+68     	; 0x7b80 <main+0x35a>
				else if ( signatureIndex == 1 )
					signature = (SIGNATURE_BYTES >> 8) & 0x000000FF;
				else
					signature = SIGNATURE_BYTES & 0x000000FF;
    7b3c:	8f e0       	ldi	r24, 0x0F	; 15
    7b3e:	20 c0       	rjmp	.+64     	; 0x7b80 <main+0x35a>
			}
			break;

			case CMD_READ_LOCK_ISP:
				msgLength = 4;
				msgBuffer[1] = STATUS_CMD_OK;
    7b40:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = boot_lock_fuse_bits_get( GET_LOCK_BITS );
    7b42:	e1 e0       	ldi	r30, 0x01	; 1
    7b44:	f0 e0       	ldi	r31, 0x00	; 0
    7b46:	89 e0       	ldi	r24, 0x09	; 9
    7b48:	80 93 57 00 	sts	0x0057, r24
    7b4c:	e4 91       	lpm	r30, Z+
    7b4e:	eb 83       	std	Y+3, r30	; 0x03
				msgBuffer[3] = STATUS_CMD_OK;
    7b50:	1c 82       	std	Y+4, r1	; 0x04
				break;
    7b52:	51 2c       	mov	r5, r1
				msgBuffer[3] = STATUS_CMD_OK;
			}
			break;

			case CMD_READ_LOCK_ISP:
				msgLength = 4;
    7b54:	04 e0       	ldi	r16, 0x04	; 4
    7b56:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[1] = STATUS_CMD_OK;
				msgBuffer[2] = boot_lock_fuse_bits_get( GET_LOCK_BITS );
				msgBuffer[3] = STATUS_CMD_OK;
				break;
    7b58:	eb c0       	rjmp	.+470    	; 0x7d30 <main+0x50a>

			case CMD_READ_FUSE_ISP:
			{
				unsigned char fuseBits;

				if ( msgBuffer[2] == 0x50 )
    7b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    7b5c:	80 35       	cpi	r24, 0x50	; 80
    7b5e:	51 f4       	brne	.+20     	; 0x7b74 <main+0x34e>
				{
					if ( msgBuffer[3] == 0x08 )
    7b60:	8c 81       	ldd	r24, Y+4	; 0x04
    7b62:	88 30       	cpi	r24, 0x08	; 8
    7b64:	19 f4       	brne	.+6      	; 0x7b6c <main+0x346>
						fuseBits = boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
    7b66:	e2 e0       	ldi	r30, 0x02	; 2
    7b68:	f0 e0       	ldi	r31, 0x00	; 0
    7b6a:	06 c0       	rjmp	.+12     	; 0x7b78 <main+0x352>
					else
						fuseBits = boot_lock_fuse_bits_get( GET_LOW_FUSE_BITS );
    7b6c:	89 e0       	ldi	r24, 0x09	; 9
    7b6e:	e0 e0       	ldi	r30, 0x00	; 0
    7b70:	f0 e0       	ldi	r31, 0x00	; 0
    7b72:	03 c0       	rjmp	.+6      	; 0x7b7a <main+0x354>
				}
				else
				{
					fuseBits = boot_lock_fuse_bits_get( GET_HIGH_FUSE_BITS );
    7b74:	e3 e0       	ldi	r30, 0x03	; 3
    7b76:	f0 e0       	ldi	r31, 0x00	; 0
    7b78:	89 e0       	ldi	r24, 0x09	; 9
    7b7a:	80 93 57 00 	sts	0x0057, r24
    7b7e:	84 91       	lpm	r24, Z+
				}
				msgLength = 4;
				msgBuffer[1] = STATUS_CMD_OK;
    7b80:	1a 82       	std	Y+2, r1	; 0x02
				msgBuffer[2] = fuseBits;
    7b82:	8b 83       	std	Y+3, r24	; 0x03
    7b84:	e5 cf       	rjmp	.-54     	; 0x7b50 <main+0x32a>
			break;

			case CMD_CHIP_ERASE_ISP:
				eraseAddress = 0;
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
    7b86:	1a 82       	std	Y+2, r1	; 0x02
				break;
    7b88:	51 2c       	mov	r5, r1
			}
			break;

			case CMD_CHIP_ERASE_ISP:
				eraseAddress = 0;
				msgLength = 2;
    7b8a:	02 e0       	ldi	r16, 0x02	; 2
    7b8c:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[3] = STATUS_CMD_OK;
			}
			break;

			case CMD_CHIP_ERASE_ISP:
				eraseAddress = 0;
    7b8e:	a1 2c       	mov	r10, r1
    7b90:	b1 2c       	mov	r11, r1
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
				break;
    7b92:	ce c0       	rjmp	.+412    	; 0x7d30 <main+0x50a>

			case CMD_LOAD_ADDRESS:
				address = ( ((msgBuffer[3])<<8)|(msgBuffer[4]) )<<1;  //convert word to byte address
    7b94:	fc 81       	ldd	r31, Y+4	; 0x04
    7b96:	c1 5e       	subi	r28, 0xE1	; 225
    7b98:	de 4f       	sbci	r29, 0xFE	; 254
    7b9a:	f8 83       	st	Y, r31
    7b9c:	cf 51       	subi	r28, 0x1F	; 31
    7b9e:	d1 40       	sbci	r29, 0x01	; 1
    7ba0:	c2 5e       	subi	r28, 0xE2	; 226
    7ba2:	de 4f       	sbci	r29, 0xFE	; 254
    7ba4:	18 82       	st	Y, r1
    7ba6:	ce 51       	subi	r28, 0x1E	; 30
    7ba8:	d1 40       	sbci	r29, 0x01	; 1
    7baa:	8d 81       	ldd	r24, Y+5	; 0x05
    7bac:	c2 5e       	subi	r28, 0xE2	; 226
    7bae:	de 4f       	sbci	r29, 0xFE	; 254
    7bb0:	e8 80       	ld	r14, Y
    7bb2:	f9 80       	ldd	r15, Y+1	; 0x01
    7bb4:	ce 51       	subi	r28, 0x1E	; 30
    7bb6:	d1 40       	sbci	r29, 0x01	; 1
    7bb8:	e8 2a       	or	r14, r24
    7bba:	ee 0c       	add	r14, r14
    7bbc:	ff 1c       	adc	r15, r15
    7bbe:	66 c0       	rjmp	.+204    	; 0x7c8c <main+0x466>
				break;

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP:
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
    7bc0:	2a 81       	ldd	r18, Y+2	; 0x02
    7bc2:	cf 5d       	subi	r28, 0xDF	; 223
    7bc4:	de 4f       	sbci	r29, 0xFE	; 254
    7bc6:	28 83       	st	Y, r18
    7bc8:	c1 52       	subi	r28, 0x21	; 33
    7bca:	d1 40       	sbci	r29, 0x01	; 1
    7bcc:	c0 5e       	subi	r28, 0xE0	; 224
    7bce:	de 4f       	sbci	r29, 0xFE	; 254
    7bd0:	18 82       	st	Y, r1
    7bd2:	c0 52       	subi	r28, 0x20	; 32
    7bd4:	d1 40       	sbci	r29, 0x01	; 1
    7bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    7bd8:	c0 5e       	subi	r28, 0xE0	; 224
    7bda:	de 4f       	sbci	r29, 0xFE	; 254
    7bdc:	28 81       	ld	r18, Y
    7bde:	39 81       	ldd	r19, Y+1	; 0x01
    7be0:	c0 52       	subi	r28, 0x20	; 32
    7be2:	d1 40       	sbci	r29, 0x01	; 1
    7be4:	29 2b       	or	r18, r25
				if(size>128) break;
    7be6:	21 38       	cpi	r18, 0x81	; 129
    7be8:	31 05       	cpc	r19, r1
    7bea:	08 f0       	brcs	.+2      	; 0x7bee <main+0x3c8>
    7bec:	a0 c0       	rjmp	.+320    	; 0x7d2e <main+0x508>
				unsigned char *p = msgBuffer+10;
				unsigned int  data;
				unsigned char highByte, lowByte;
				address_t     tempaddress = address;

				if ( msgBuffer[0] == CMD_PROGRAM_FLASH_ISP )
    7bee:	83 31       	cpi	r24, 0x13	; 19
    7bf0:	09 f0       	breq	.+2      	; 0x7bf4 <main+0x3ce>
    7bf2:	39 c0       	rjmp	.+114    	; 0x7c66 <main+0x440>
				{
					// erase only main section (bootloader protection)
					if  (  eraseAddress < APP_END )
    7bf4:	a1 14       	cp	r10, r1
    7bf6:	48 e7       	ldi	r20, 0x78	; 120
    7bf8:	b4 06       	cpc	r11, r20
    7bfa:	58 f4       	brcc	.+22     	; 0x7c12 <main+0x3ec>
					{
						boot_page_erase(eraseAddress);	// Perform page erase
    7bfc:	83 e0       	ldi	r24, 0x03	; 3
    7bfe:	f5 01       	movw	r30, r10
    7c00:	80 93 57 00 	sts	0x0057, r24
    7c04:	e8 95       	spm
						boot_spm_busy_wait();		// Wait until the memory is erased.
    7c06:	07 b6       	in	r0, 0x37	; 55
    7c08:	00 fc       	sbrc	r0, 0
    7c0a:	fd cf       	rjmp	.-6      	; 0x7c06 <main+0x3e0>
						eraseAddress += SPM_PAGESIZE;    // point to next page to be erase
    7c0c:	f0 e8       	ldi	r31, 0x80	; 128
    7c0e:	af 0e       	add	r10, r31
    7c10:	b1 1c       	adc	r11, r1
    7c12:	8b 85       	ldd	r24, Y+11	; 0x0b
    7c14:	de 01       	movw	r26, r28
    7c16:	1c 96       	adiw	r26, 0x0c	; 12
				unsigned char fuseBits;

				if ( msgBuffer[2] == 0x50 )
				{
					if ( msgBuffer[3] == 0x08 )
						fuseBits = boot_lock_fuse_bits_get( GET_EXTENDED_FUSE_BITS );
    7c18:	a7 01       	movw	r20, r14
					do {
						lowByte   = *p++;
						highByte  = *p++;

						data =  (highByte << 8) | lowByte;
						boot_page_fill(address,data);
    7c1a:	61 e0       	ldi	r22, 0x01	; 1
					/* Write FLASH */
					do {
						lowByte   = *p++;
						highByte  = *p++;

						data =  (highByte << 8) | lowByte;
    7c1c:	3c 90       	ld	r3, X
    7c1e:	21 2c       	mov	r2, r1
    7c20:	f1 01       	movw	r30, r2
    7c22:	e8 2b       	or	r30, r24
    7c24:	cf 01       	movw	r24, r30
						boot_page_fill(address,data);
    7c26:	fa 01       	movw	r30, r20
    7c28:	0c 01       	movw	r0, r24
    7c2a:	60 93 57 00 	sts	0x0057, r22
    7c2e:	e8 95       	spm
    7c30:	11 24       	eor	r1, r1

						address = address + 2;  	// Select next word in memory
    7c32:	4e 5f       	subi	r20, 0xFE	; 254
    7c34:	5f 4f       	sbci	r21, 0xFF	; 255
						size -= 2;			// Reduce number of bytes to write by two
    7c36:	22 50       	subi	r18, 0x02	; 2
    7c38:	31 09       	sbc	r19, r1
    7c3a:	12 96       	adiw	r26, 0x02	; 2
					} while(size);			// Loop until all bytes written
    7c3c:	21 15       	cp	r18, r1
    7c3e:	31 05       	cpc	r19, r1
    7c40:	21 f0       	breq	.+8      	; 0x7c4a <main+0x424>
	return UART_DATA_REG;
}


int main(void) __attribute__ ((OS_main));
int main(void)
    7c42:	fd 01       	movw	r30, r26
    7c44:	31 97       	sbiw	r30, 0x01	; 1
					}

					/* Write FLASH */
					do {
						lowByte   = *p++;
						highByte  = *p++;
    7c46:	80 81       	ld	r24, Z
    7c48:	e9 cf       	rjmp	.-46     	; 0x7c1c <main+0x3f6>

						address = address + 2;  	// Select next word in memory
						size -= 2;			// Reduce number of bytes to write by two
					} while(size);			// Loop until all bytes written

					boot_page_write(tempaddress);
    7c4a:	85 e0       	ldi	r24, 0x05	; 5
    7c4c:	f7 01       	movw	r30, r14
    7c4e:	80 93 57 00 	sts	0x0057, r24
    7c52:	e8 95       	spm
					boot_spm_busy_wait();
    7c54:	07 b6       	in	r0, 0x37	; 55
    7c56:	00 fc       	sbrc	r0, 0
    7c58:	fd cf       	rjmp	.-6      	; 0x7c54 <main+0x42e>
					boot_rww_enable();				// Re-enable the RWW section
    7c5a:	81 e1       	ldi	r24, 0x11	; 17
    7c5c:	80 93 57 00 	sts	0x0057, r24
    7c60:	e8 95       	spm
						highByte  = *p++;

						data =  (highByte << 8) | lowByte;
						boot_page_fill(address,data);

						address = address + 2;  	// Select next word in memory
    7c62:	7a 01       	movw	r14, r20
    7c64:	13 c0       	rjmp	.+38     	; 0x7c8c <main+0x466>
	return UART_DATA_REG;
}


int main(void) __attribute__ ((OS_main));
int main(void)
    7c66:	2e 0d       	add	r18, r14
    7c68:	3f 1d       	adc	r19, r15
			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP:
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
				if(size>128) break;
				unsigned char *p = msgBuffer+10;
    7c6a:	de 01       	movw	r26, r28
    7c6c:	1b 96       	adiw	r26, 0x0b	; 11
				}
				else
				{
					/* write EEPROM */
					do {
						wdt_reset();
    7c6e:	a8 95       	wdr
						EEARL = address;			// Setup EEPROM address
    7c70:	e1 bc       	out	0x21, r14	; 33
						EEARH = (address >> 8);
    7c72:	f2 bc       	out	0x22, r15	; 34
						address++;					// Select next EEPROM byte
    7c74:	ff ef       	ldi	r31, 0xFF	; 255
    7c76:	ef 1a       	sub	r14, r31
    7c78:	ff 0a       	sbc	r15, r31

						EEDR= *p++;				    // get byte from buffer
    7c7a:	8d 91       	ld	r24, X+
    7c7c:	80 bd       	out	0x20, r24	; 32
						EECR |= (1<<EEMWE);			// Write data into EEPROM
    7c7e:	fa 9a       	sbi	0x1f, 2	; 31
						EECR |= (1<<EEWE);
    7c80:	f9 9a       	sbi	0x1f, 1	; 31

						while (EECR & (1<<EEWE));	// Wait for write operation to finish
    7c82:	f9 99       	sbic	0x1f, 1	; 31
    7c84:	fe cf       	rjmp	.-4      	; 0x7c82 <main+0x45c>
						size--;						// Decrease number of bytes to write
					} while(size);					// Loop until all bytes written
    7c86:	e2 16       	cp	r14, r18
    7c88:	f3 06       	cpc	r15, r19
    7c8a:	89 f7       	brne	.-30     	; 0x7c6e <main+0x448>
				}
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_OK;
    7c8c:	1a 82       	std	Y+2, r1	; 0x02
    7c8e:	4b c0       	rjmp	.+150    	; 0x7d26 <main+0x500>
			break;

			case CMD_READ_FLASH_ISP:
			case CMD_READ_EEPROM_ISP:
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
    7c90:	2a 81       	ldd	r18, Y+2	; 0x02
    7c92:	cd 5d       	subi	r28, 0xDD	; 221
    7c94:	de 4f       	sbci	r29, 0xFE	; 254
    7c96:	28 83       	st	Y, r18
    7c98:	c3 52       	subi	r28, 0x23	; 35
    7c9a:	d1 40       	sbci	r29, 0x01	; 1
    7c9c:	ce 5d       	subi	r28, 0xDE	; 222
    7c9e:	de 4f       	sbci	r29, 0xFE	; 254
    7ca0:	18 82       	st	Y, r1
    7ca2:	c2 52       	subi	r28, 0x22	; 34
    7ca4:	d1 40       	sbci	r29, 0x01	; 1
    7ca6:	9b 81       	ldd	r25, Y+3	; 0x03
    7ca8:	ce 5d       	subi	r28, 0xDE	; 222
    7caa:	de 4f       	sbci	r29, 0xFE	; 254
    7cac:	28 81       	ld	r18, Y
    7cae:	39 81       	ldd	r19, Y+1	; 0x01
    7cb0:	c2 52       	subi	r28, 0x22	; 34
    7cb2:	d1 40       	sbci	r29, 0x01	; 1
    7cb4:	29 2b       	or	r18, r25
				unsigned char *p = msgBuffer+1;
				msgLength = size+3;
    7cb6:	89 01       	movw	r16, r18
    7cb8:	0d 5f       	subi	r16, 0xFD	; 253
    7cba:	1f 4f       	sbci	r17, 0xFF	; 255

				*p++ = STATUS_CMD_OK;
    7cbc:	1a 82       	std	Y+2, r1	; 0x02
				if (msgBuffer[0] == CMD_READ_FLASH_ISP )
    7cbe:	84 31       	cpi	r24, 0x14	; 20
    7cc0:	c1 f4       	brne	.+48     	; 0x7cf2 <main+0x4cc>
    7cc2:	ae 01       	movw	r20, r28
    7cc4:	4c 5f       	subi	r20, 0xFC	; 252
    7cc6:	5f 4f       	sbci	r21, 0xFF	; 255
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
				unsigned char *p = msgBuffer+1;
				msgLength = size+3;

				*p++ = STATUS_CMD_OK;
    7cc8:	de 01       	movw	r26, r28
    7cca:	13 96       	adiw	r26, 0x03	; 3
				{
					unsigned int data;

					// Read FLASH
					do {
						wdt_reset();
    7ccc:	a8 95       	wdr
						data = pgm_read_word_near(address);
    7cce:	f7 01       	movw	r30, r14
    7cd0:	65 91       	lpm	r22, Z+
    7cd2:	74 91       	lpm	r23, Z+
						*p++ = (unsigned char)data;         //LSB
    7cd4:	6c 93       	st	X, r22
						*p++ = (unsigned char)(data >> 8);	//MSB
    7cd6:	fa 01       	movw	r30, r20
    7cd8:	70 83       	st	Z, r23
	return UART_DATA_REG;
}


int main(void) __attribute__ ((OS_main));
int main(void)
    7cda:	12 96       	adiw	r26, 0x02	; 2
					do {
						wdt_reset();
						data = pgm_read_word_near(address);
						*p++ = (unsigned char)data;         //LSB
						*p++ = (unsigned char)(data >> 8);	//MSB
						address    += 2;  	 // Select next word in memory
    7cdc:	f2 e0       	ldi	r31, 0x02	; 2
    7cde:	ef 0e       	add	r14, r31
    7ce0:	f1 1c       	adc	r15, r1
						size -= 2;
    7ce2:	22 50       	subi	r18, 0x02	; 2
    7ce4:	31 09       	sbc	r19, r1
    7ce6:	4e 5f       	subi	r20, 0xFE	; 254
    7ce8:	5f 4f       	sbci	r21, 0xFF	; 255
					}while (size);
    7cea:	21 15       	cp	r18, r1
    7cec:	31 05       	cpc	r19, r1
    7cee:	71 f7       	brne	.-36     	; 0x7ccc <main+0x4a6>
    7cf0:	16 c0       	rjmp	.+44     	; 0x7d1e <main+0x4f8>
	return UART_DATA_REG;
}


int main(void) __attribute__ ((OS_main));
int main(void)
    7cf2:	c7 01       	movw	r24, r14
    7cf4:	82 0f       	add	r24, r18
    7cf6:	93 1f       	adc	r25, r19
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
				unsigned char *p = msgBuffer+1;
				msgLength = size+3;

				*p++ = STATUS_CMD_OK;
    7cf8:	de 01       	movw	r26, r28
    7cfa:	13 96       	adiw	r26, 0x03	; 3
				}
				else
				{
					/* Read EEPROM */
					do {
						EEARL = address;			// Setup EEPROM address
    7cfc:	e1 bc       	out	0x21, r14	; 33
						EEARH = ((address >> 8));
    7cfe:	f2 bc       	out	0x22, r15	; 34
						address++;					// Select next EEPROM byte
    7d00:	4f ef       	ldi	r20, 0xFF	; 255
    7d02:	e4 1a       	sub	r14, r20
    7d04:	f4 0a       	sbc	r15, r20
						EECR |= (1<<EERE);			// Read EEPROM
    7d06:	f8 9a       	sbi	0x1f, 0	; 31
						*p++ = EEDR;				// Send EEPROM data
    7d08:	40 b5       	in	r20, 0x20	; 32
    7d0a:	4d 93       	st	X+, r20
						size--;
					}while(size);
    7d0c:	e8 16       	cp	r14, r24
    7d0e:	f9 06       	cpc	r15, r25
    7d10:	a9 f7       	brne	.-22     	; 0x7cfc <main+0x4d6>
    7d12:	a3 e0       	ldi	r26, 0x03	; 3
    7d14:	b0 e0       	ldi	r27, 0x00	; 0
    7d16:	ac 0f       	add	r26, r28
    7d18:	bd 1f       	adc	r27, r29
    7d1a:	a2 0f       	add	r26, r18
    7d1c:	b3 1f       	adc	r27, r19
				}
				*p++ = STATUS_CMD_OK;
    7d1e:	1c 92       	st	X, r1
    7d20:	06 c0       	rjmp	.+12     	; 0x7d2e <main+0x508>
			}
			break;

			default:
				msgLength = 2;
				msgBuffer[1] = STATUS_CMD_FAILED;
    7d22:	80 ec       	ldi	r24, 0xC0	; 192
    7d24:	8a 83       	std	Y+2, r24	; 0x02
				break;
    7d26:	51 2c       	mov	r5, r1
				*p++ = STATUS_CMD_OK;
			}
			break;

			default:
				msgLength = 2;
    7d28:	02 e0       	ldi	r16, 0x02	; 2
    7d2a:	10 e0       	ldi	r17, 0x00	; 0
				msgBuffer[1] = STATUS_CMD_FAILED;
				break;
    7d2c:	01 c0       	rjmp	.+2      	; 0x7d30 <main+0x50a>

			case CMD_PROGRAM_FLASH_ISP:
			case CMD_PROGRAM_EEPROM_ISP:
			{
				unsigned int  size = (((unsigned int)msgBuffer[1])<<8) | msgBuffer[2];
				if(size>128) break;
    7d2e:	51 2c       	mov	r5, r1
			}

			/*
			 * Now send answer message back
			 */
			sendchar(MESSAGE_START);     
    7d30:	8b e1       	ldi	r24, 0x1B	; 27
    7d32:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			checksum = MESSAGE_START^0;

			sendchar(seqNum);
    7d36:	87 2d       	mov	r24, r7
    7d38:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			checksum ^= seqNum;

			c = ((msgLength>>8)&0xFF);
			sendchar(c);
    7d3c:	81 2f       	mov	r24, r17
    7d3e:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			checksum ^= c;

			c = msgLength&0x00FF;
			sendchar(c);
    7d42:	80 2f       	mov	r24, r16
    7d44:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			checksum ^= c;

			sendchar(TOKEN);
    7d48:	8e e0       	ldi	r24, 0x0E	; 14
    7d4a:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			sendchar(seqNum);
			checksum ^= seqNum;

			c = ((msgLength>>8)&0xFF);
			sendchar(c);
			checksum ^= c;
    7d4e:	95 e1       	ldi	r25, 0x15	; 21
    7d50:	69 2e       	mov	r6, r25
    7d52:	67 24       	eor	r6, r7

			c = msgLength&0x00FF;
			sendchar(c);
			checksum ^= c;
    7d54:	60 26       	eor	r6, r16

			sendchar(TOKEN);
			checksum ^= TOKEN;
    7d56:	61 26       	eor	r6, r17
	return UART_DATA_REG;
}


int main(void) __attribute__ ((OS_main));
int main(void)
    7d58:	81 e0       	ldi	r24, 0x01	; 1
    7d5a:	90 e0       	ldi	r25, 0x00	; 0
    7d5c:	8c 0f       	add	r24, r28
    7d5e:	9d 1f       	adc	r25, r29
    7d60:	08 0f       	add	r16, r24
    7d62:	19 1f       	adc	r17, r25
			checksum ^= c;

			sendchar(TOKEN);
			checksum ^= TOKEN;

			p = msgBuffer;
    7d64:	4c 01       	movw	r8, r24
			while ( msgLength )
    7d66:	08 c0       	rjmp	.+16     	; 0x7d78 <main+0x552>
			{
				c = *p++;
    7d68:	f4 01       	movw	r30, r8
    7d6a:	41 90       	ld	r4, Z+
    7d6c:	4f 01       	movw	r8, r30
				sendchar(c);
    7d6e:	84 2d       	mov	r24, r4
    7d70:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
				checksum ^=c;
    7d74:	64 24       	eor	r6, r4
				msgLength--;
				wdt_reset();
    7d76:	a8 95       	wdr

			sendchar(TOKEN);
			checksum ^= TOKEN;

			p = msgBuffer;
			while ( msgLength )
    7d78:	80 16       	cp	r8, r16
    7d7a:	91 06       	cpc	r9, r17
    7d7c:	a9 f7       	brne	.-22     	; 0x7d68 <main+0x542>
				sendchar(c);
				checksum ^=c;
				msgLength--;
				wdt_reset();
			}                   
			sendchar(checksum);	        
    7d7e:	86 2d       	mov	r24, r6
    7d80:	0e 94 07 3c 	call	0x780e	; 0x780e <sendchar>
			seqNum++;
    7d84:	73 94       	inc	r7
    7d86:	20 e0       	ldi	r18, 0x00	; 0
    7d88:	30 e0       	ldi	r19, 0x00	; 0


	if (boot_state==1)
	{
		//*	main loop
		while (!isLeave)
    7d8a:	55 20       	and	r5, r5
    7d8c:	09 f4       	brne	.+2      	; 0x7d90 <main+0x56a>
    7d8e:	ea cd       	rjmp	.-1068   	; 0x7964 <main+0x13e>
    7d90:	ca cd       	rjmp	.-1132   	; 0x7926 <main+0x100>
    7d92:	ff cf       	rjmp	.-2      	; 0x7d92 <main+0x56c>
				switch (msgParseState){
				case ST_START:
					if ( c == MESSAGE_START )
					{
						msgParseState	=	ST_GET_SEQ_NUM;
						checksum		=	MESSAGE_START^0;
    7d94:	8b e1       	ldi	r24, 0x1B	; 27
    7d96:	68 2e       	mov	r6, r24

				switch (msgParseState){
				case ST_START:
					if ( c == MESSAGE_START )
					{
						msgParseState	=	ST_GET_SEQ_NUM;
    7d98:	81 e0       	ldi	r24, 0x01	; 1
    7d9a:	e9 cd       	rjmp	.-1070   	; 0x796e <main+0x148>
				case ST_GET_DATA:
					msgBuffer[ii++]	=	c;
					checksum		^=	c;
					if (ii == msgLength )
					{
						msgParseState	=	ST_GET_CHECK;
    7d9c:	86 e0       	ldi	r24, 0x06	; 6
    7d9e:	e7 cd       	rjmp	.-1074   	; 0x796e <main+0x148>
					{
						msgParseState	=	ST_PROCESS;
					}
					else
					{
						msgParseState	=	ST_START;
    7da0:	80 e0       	ldi	r24, 0x00	; 0
    7da2:	e5 cd       	rjmp	.-1078   	; 0x796e <main+0x148>
